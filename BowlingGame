#include <iostream>
#include <vector>
#include <limits>

int constexpr MAX_FRAME = 10;
using namespace std;

class Bowling
{
private:
    vector<int> rolls;

    bool isStrike(int index)
    {
        return rolls[index] == MAX_FRAME;
    }

    bool isSpare(int index)
    {
        return rolls[index] + rolls[index + 1] == MAX_FRAME;
    }

public:
    Bowling(const vector<int> &rolls) : rolls(rolls) {}

    int calculateScore()
    {
        int score = 0;
        int rollCountIndex = 0;

        for (int frame = 0; frame < MAX_FRAME; ++frame)
        {
            if (frame < MAX_FRAME - 1)
            {
                if (isStrike(rollCountIndex))
                {
                    int bonus = rolls[rollCountIndex + 1] + rolls[rollCountIndex + 2];
                    score += MAX_FRAME + bonus;
                    cout << "Frame " << frame + 1 << ": Strike: 10 + " << bonus
                         << " = " << (MAX_FRAME + bonus) << " (Total: " << score << ")" << endl;
                    rollCountIndex += 1;
                }
                else if (isSpare(rollCountIndex))
                {
                    int bonus = rolls[rollCountIndex + 2];
                    score += MAX_FRAME + bonus;
                    cout << "Frame " << frame + 1 << ": Spare: 10 + " << bonus
                         << " = " << (MAX_FRAME + bonus) << " (Total: " << score << ")" << endl;
                    rollCountIndex += 2;
                }
                else
                {
                    int frameScore = rolls[rollCountIndex] + rolls[rollCountIndex + 1];
                    score += frameScore;
                    cout << "Frame " << frame + 1 << ": Normal: " << frameScore
                         << " (Total: " << score << ")" << endl;
                    rollCountIndex += 2;
                }
            }
            else
            {
                int frameScore = rolls[rollCountIndex] + rolls[rollCountIndex + 1];
                if (rolls[rollCountIndex] == MAX_FRAME || frameScore == MAX_FRAME)
                {
                    frameScore += rolls[rollCountIndex + 2];
                }
                score += frameScore;
                cout << "Frame 10: " << frameScore << " (Total: " << score << ")" << endl;
            }
        }

        return score;
    }
};

bool readValidInt(int &value)
{
    cin >> value;
    if (cin.fail())
    {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        return false;
    }
    return true;
}

int main()
{
    vector<int> rolls;
    int input;

    cout << "Enter bowling scores for 10 frames." << endl;
    cout << "Each roll must be a number between 0 and 10." << endl;

    for (int frame = 1; frame <= MAX_FRAME; ++frame)
    {
        if (frame < MAX_FRAME)
        {
            cout << "Frame " << frame << ", Trial 1: ";
            if (!readValidInt(input) || input < 0 || input > MAX_FRAME)
            {
                cout << "Invalid roll. Enter a number between 0 and 10." << endl;
                --frame;
                continue;
            }
            rolls.push_back(input);

            if (input != MAX_FRAME)
            {
                int secondInput;
                cout << "Frame " << frame << ", Trial 2: ";
                if (!readValidInt(secondInput) || secondInput < 0 || secondInput > MAX_FRAME || (input + secondInput > MAX_FRAME))
                {
                    cout << "Invalid second roll. The total for the frame cannot exceed 10." << endl;
                    rolls.pop_back();
                    --frame;
                    continue;
                }
                rolls.push_back(secondInput);
            }
        }
        else
        {
            // Frame 10 logic
            cout << "Frame 10, Trial 1: ";
            if (!readValidInt(input) || input < 0 || input > MAX_FRAME)
            {
                cout << "Invalid roll. Enter a number between 0 and 10." << endl;
                --frame;
                continue;
            }
            rolls.push_back(input);

            int secondInput;
            cout << "Frame 10, Trial 2: ";
            if (!readValidInt(secondInput) || secondInput < 0 || secondInput > MAX_FRAME ||
                (input != MAX_FRAME && input + secondInput > MAX_FRAME))
            {
                cout << "Invalid second roll." << endl;
                rolls.pop_back();
                --frame;
                continue;
            }
            rolls.push_back(secondInput);

            // If strike or spare, allow third trial
            if (input == MAX_FRAME || input + secondInput == MAX_FRAME)
            {
                int thirdInput;
                cout << "Frame 10, Trial 3: ";
                if (!readValidInt(thirdInput) || thirdInput < 0 || thirdInput > MAX_FRAME)
                {
                    cout << "Invalid third roll." << endl;
                    rolls.pop_back();
                    rolls.pop_back();
                    --frame;
                    continue;
                }
                rolls.push_back(thirdInput);
            }
        }
    }

    Bowling game(rolls);
    int totalScore = game.calculateScore();
    cout << "\nTotal Score: " << totalScore << endl;
    return 0;
}
